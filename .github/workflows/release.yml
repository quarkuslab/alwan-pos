name: Android Release Build

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+*" # Matches v1.2.3, v1.2.3-beta, etc.

jobs:
  validate-tag:
    runs-on: ubuntu-latest
    steps:
      - name: Validate tag format
        run: |
          if ! [[ ${{ github.ref_name }} =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "Invalid tag format. Must be like v1.2.3 or v1.2.3-beta"
            exit 1
          fi

  build:
    needs: validate-tag
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for proper versioning

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: "gradle" # Enable Gradle caching

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: wrapper

      - name: Create keystore directory
        run: mkdir -p android/app/keystore

      - name: Decode Keystore
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > android/app/keystore/release.keystore

      - name: Create keystore.properties
        run: |
          cat << EOF > android/keystore.properties
          storePassword=${{ secrets.KEYSTORE_STORE_PASSWORD }}
          keyPassword=${{ secrets.KEYSTORE_KEY_PASSWORD }}
          keyAlias=${{ secrets.KEYSTORE_KEY_ALIAS }}
          storeFile=keystore/release.keystore
          EOF

      - name: Build Web Assets
        run: pnpm run web:build

      - name: Prepare Android Assets Directory
        run: |
          mkdir -p android/app/src/main/assets/www

      - name: Copy Web Assets
        run: |
          cp -r dist/* android/app/src/main/assets/www/

      - name: Make Gradle wrapper executable
        run: chmod +x android/gradlew

      - name: Build Release and Debug APK
        run: |
          cd android
          ./gradlew assembleRelease assembleDebug --stacktrace || {
            echo "Gradle build failed. Checking for logs..."
            find . -name "*.log" -type f -exec echo "=== {} ===" \; -exec cat {} \;
            exit 1
          }

      - name: Verify APKs
        run: |
          if [ ! -f "android/app/build/outputs/apk/release/app-release.apk" ]; then
            echo "Release APK file not found!"
            exit 1
          fi
          if [ ! -f "android/app/build/outputs/apk/debug/app-debug.apk" ]; then
            echo "Debug APK file not found!"
            exit 1
          }
          echo "Release APK size: $(ls -lh android/app/build/outputs/apk/release/app-release.apk)"
          echo "Debug APK size: $(ls -lh android/app/build/outputs/apk/debug/app-debug.apk)"

      - name: Prepare Release Directory
        run: mkdir -p releases

      - name: Rename and Copy APKs
        run: |
          VERSION=${{ github.ref_name }}
          cp android/app/build/outputs/apk/release/app-release.apk "releases/alwan-pos-${VERSION}.apk"
          cp android/app/build/outputs/apk/debug/app-debug.apk "releases/alwan-pos-${VERSION}-debug.apk"
          echo "Created release APK: alwan-pos-${VERSION}.apk"
          echo "Created debug APK: alwan-pos-${VERSION}-debug.apk"

      - name: Generate release notes
        id: release_notes
        run: |
          echo "### Changes in ${{ github.ref_name }}" > release_notes.md
          echo "" >> release_notes.md
          git log --pretty=format:"* %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> release_notes.md

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: releases/*.apk
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}
          generate_release_notes: true
          make_latest: true # Mark this release as "Latest"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload pnpm-lock.yaml
        if: success() && !hashFiles('pnpm-lock.yaml')
        uses: actions/upload-artifact@v3
        with:
          name: pnpm-lock
          path: pnpm-lock.yaml
          retention-days: 7

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-apk
          path: releases/*.apk
          retention-days: 7
